{"version":3,"sources":["gallery_components/gallery-grid.jsx","gallery_components/show-image.jsx","App.js","serviceWorker.js","index.js"],"names":["GalleryGrid","props","images","onClick","react_default","a","createElement","id","className","map","image","key","src","alt","ShowImage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","code","imageForward","imageBack","imageClose","window","addEventListener","removeEventListener","defineProperty","style","showForward","display","showBack","Component","App","state","show","showImage","showIndex","handleClick","indexOf","setState","performShowImage","handleClose","handleForward","length","handleBack","gallery_grid","show_image","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.070cc13a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction GalleryGrid(props) {\r\n\r\n  const  {images,onClick} = props;\r\n\r\n    return (\r\n            <div id=\"gallery\" className=\"container\" >\r\n                <div className=\"row\">\r\n                    {\r\n                        images.map(image=>\r\n                            <div key={image} className=\"col-xl-3 col-lg-4 col-md-6  col-xs-12\">\r\n                                <div id=\"gallery_img\" onClick={()=>onClick(image)}>\r\n                                    <img src={image} alt=\"picture-1\"/>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default GalleryGrid;","import React, {Component} from 'react';\r\nclass ShowImage extends Component {\r\n\r\n    constructor(props) { //is use to handleKeyDown can have access to props\r\n        super(props);\r\n    }\r\n\r\n    handleKeyDown=(key)=>{\r\n        if(key.code===\"ArrowRight\") this.props.imageForward();\r\n        else if(key.code===\"ArrowLeft\") this.props.imageBack();\r\n        else if(key.code===\"Escape\") this.props.imageClose();\r\n    }\r\n\r\n    componentDidMount() {window.addEventListener('keydown', this.handleKeyDown)};\r\n\r\n    componentWillUnmount() {window.removeEventListener('keydown', this.handleKeyDown);}\r\n\r\n    render() {\r\n        return (\r\n          <div >\r\n              <div id=\"show_image\">\r\n                  <div id=\"showed_image\">\r\n                      <div id=\"picture\">\r\n                          <img src={this.props.image} alt=\"picture-1\" alt={this.props.alt}/>\r\n                      </div>\r\n                      <div id=\"close\" onClick={this.props.imageClose}>\r\n                          &#10006;\r\n                      </div>\r\n\r\n                      <div id=\"forward\" onClick={this.props.imageForward} style={this.props.showForward ? {display:\"block\"}: {display:\"none\"}} >\r\n                          <p>{'>'}</p>\r\n                      </div>\r\n\r\n                      <div id=\"back\" onClick={this.props.imageBack} style={this.props.showBack ? {display:\"block\"}: {display:\"none\"}}>\r\n                          <p>{\"<\"}</p>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShowImage;","import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './css/main.css';\nimport GlleryGrid from './gallery_components/gallery-grid'\nimport './gallery_components/show-image'\nimport ShowImage from \"./gallery_components/show-image\";\n\n\nclass App extends Component {\nstate={\n    images:['img/1.jpg','img/2.jpg','img/3.jpg','img/4.jpg','img/5.jpg','img/6.jpg'],\n    show:false,\n    showImage:null,\n    showIndex:null,\n    showForward:false,\n    showBack:false,\n    alt:\"alt example\"\n};\n\nhandleClick=(image)=>{\n    const show=true;\n    const showIndex = this.state.images.indexOf(image);\n    this.setState({show,showIndex});\n    this.performShowImage(showIndex);\n}\n\nhandleClose=()=>{\n    const show=false;\n    this.setState({show});\n}\nhandleForward=()=>{\n    if(this.state.showIndex<this.state.images.length-1) {\n        const showIndex = ++this.state.showIndex;\n        this.setState({showIndex});\n        this.performShowImage(showIndex);\n    }\n\n}\nhandleBack=()=>{\n    if(this.state.showIndex>0)\n    {\n        const showIndex=--this.state.showIndex;\n        this.setState({showIndex});\n        this.performShowImage(showIndex);\n    }\n\n}\n\n    performShowImage=(showIndex)=>{\n        var showForward, showBack = false;\n        if(showIndex >=0 && showIndex<this.state.images.length)\n        {\n            if(showIndex>0) showBack = true;\n            if(showIndex<this.state.images.length-1) showForward = true;\n\n            const showImage=this.state.images[showIndex];\n            this.setState({showImage,showForward,showBack})\n        }\n    }\n\n\n  render() {\n    return (\n        <div>\n            <GlleryGrid onClick={this.handleClick} images={this.state.images}/>\n            { this.state.show ? <ShowImage  alt ={this.state.alt} showForward={this.state.showForward} showBack={this.state.showBack} imageBack={this.handleBack} imageForward={this.handleForward} imageClose={this.handleClose} image={this.state.showImage}/> : ''}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}